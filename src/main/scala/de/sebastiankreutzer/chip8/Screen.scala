package de.sebastiankreutzer.chip8

import java.awt.Graphics
import javax.swing.JPanel
import java.awt.image.BufferedImage
import java.awt.image.DataBufferInt
import java.awt.event.MouseAdapter
import java.awt.event.MouseEvent
import java.awt.event.KeyAdapter
import java.awt.event.KeyEvent
import javax.sound.sampled.AudioSystem
import java.io.FileInputStream
import java.io.File
import java.io.BufferedInputStream
import javax.sound.sampled.FloatControl

class Screen extends JPanel(true) with Surface {

	var scheme = Main.configs.colorScheme

	val img = new BufferedImage(Main.ScreenWidth, Main.ScreenHeight, BufferedImage.TYPE_INT_RGB)
	val data = img.getRaster().getDataBuffer().asInstanceOf[DataBufferInt].getData()

	val defaultScreen
	for (i <- 0 until data.length) data(i) = if (defaultScreen.charAt(i) == '0') scheme.color1 else scheme.color2

	def updateScreen(fb: FrameBuffer) {
		for (i <- 0 until fb.data.length) {
			data(i) = if (fb.data(i)) scheme.color2 else scheme.color1
		}
		repaint()
	}

	def setColorScheme(cs: ColorScheme) {
		for (i <- 0 until data.length) {
			data(i) = if (data(i) == scheme.color1) cs.color1 else cs.color2
		}
		scheme = cs
		repaint()
	}

	//	override def clear() {
	//		for (i <- 0 until data.length) data(i) = scheme.color1
	//		repaint()
	//	}

	override def paint(g: Graphics) {
		g.drawImage(img, 0, 0, getWidth, getHeight, this)
	}

	//	def drawDebug() {
	//		for (x <- 0 until ScreenWidth)
	//			printf("*")
	//		println()
	//		for (y <- 0 until ScreenHeight) {
	//			printf("*")
	//			for (x <- 0 until ScreenWidth) {
	//				if (data(y * ScreenWidth + x) == White)
	//					printf("-")
	//				else
	//					printf("x")
	//			}
	//			println("*")
	//		}
	//		for (x <- 0 until ScreenWidth)
	//			printf("*")
	//		println()
	//	}

	def playSound() {
		val clip = AudioSystem.getClip()
		val audioIn = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(new File("src/main/resources/sound.wav"))))
		clip.open(audioIn)
		val control = clip.getControl(FloatControl.Type.MASTER_GAIN).asInstanceOf[FloatControl]
		control.setValue(-10.0f)
		clip.start
	}

}